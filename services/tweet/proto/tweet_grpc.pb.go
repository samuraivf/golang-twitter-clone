// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: tweet.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TweetClient is the client API for Tweet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TweetClient interface {
	CreateTweet(ctx context.Context, in *CreateTweetDto, opts ...grpc.CallOption) (*TweetId, error)
	GetTweetById(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*TweetData, error)
	GetUserTweets(ctx context.Context, in *UserIdParam, opts ...grpc.CallOption) (*Tweets, error)
	GetTweetsByTagId(ctx context.Context, in *TagId, opts ...grpc.CallOption) (*Tweets, error)
	UpdateTweet(ctx context.Context, in *UpdateTweetDto, opts ...grpc.CallOption) (*TweetId, error)
	DeleteTweet(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LikeTweet(ctx context.Context, in *TweetUserId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlikeTweet(ctx context.Context, in *TweetUserId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddComment(ctx context.Context, in *CommentTweetId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tweetClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetClient(cc grpc.ClientConnInterface) TweetClient {
	return &tweetClient{cc}
}

func (c *tweetClient) CreateTweet(ctx context.Context, in *CreateTweetDto, opts ...grpc.CallOption) (*TweetId, error) {
	out := new(TweetId)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/CreateTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) GetTweetById(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*TweetData, error) {
	out := new(TweetData)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/GetTweetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) GetUserTweets(ctx context.Context, in *UserIdParam, opts ...grpc.CallOption) (*Tweets, error) {
	out := new(Tweets)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/GetUserTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) GetTweetsByTagId(ctx context.Context, in *TagId, opts ...grpc.CallOption) (*Tweets, error) {
	out := new(Tweets)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/GetTweetsByTagId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) UpdateTweet(ctx context.Context, in *UpdateTweetDto, opts ...grpc.CallOption) (*TweetId, error) {
	out := new(TweetId)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/UpdateTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) DeleteTweet(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/DeleteTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) LikeTweet(ctx context.Context, in *TweetUserId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/LikeTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) UnlikeTweet(ctx context.Context, in *TweetUserId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/UnlikeTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) AddComment(ctx context.Context, in *CommentTweetId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetClient) DeleteComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tweet.Tweet/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TweetServer is the server API for Tweet service.
// All implementations must embed UnimplementedTweetServer
// for forward compatibility
type TweetServer interface {
	CreateTweet(context.Context, *CreateTweetDto) (*TweetId, error)
	GetTweetById(context.Context, *TweetId) (*TweetData, error)
	GetUserTweets(context.Context, *UserIdParam) (*Tweets, error)
	GetTweetsByTagId(context.Context, *TagId) (*Tweets, error)
	UpdateTweet(context.Context, *UpdateTweetDto) (*TweetId, error)
	DeleteTweet(context.Context, *TweetId) (*emptypb.Empty, error)
	LikeTweet(context.Context, *TweetUserId) (*emptypb.Empty, error)
	UnlikeTweet(context.Context, *TweetUserId) (*emptypb.Empty, error)
	AddComment(context.Context, *CommentTweetId) (*emptypb.Empty, error)
	DeleteComment(context.Context, *CommentId) (*emptypb.Empty, error)
	mustEmbedUnimplementedTweetServer()
}

// UnimplementedTweetServer must be embedded to have forward compatible implementations.
type UnimplementedTweetServer struct {
}

func (UnimplementedTweetServer) CreateTweet(context.Context, *CreateTweetDto) (*TweetId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTweet not implemented")
}
func (UnimplementedTweetServer) GetTweetById(context.Context, *TweetId) (*TweetData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetById not implemented")
}
func (UnimplementedTweetServer) GetUserTweets(context.Context, *UserIdParam) (*Tweets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTweets not implemented")
}
func (UnimplementedTweetServer) GetTweetsByTagId(context.Context, *TagId) (*Tweets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetsByTagId not implemented")
}
func (UnimplementedTweetServer) UpdateTweet(context.Context, *UpdateTweetDto) (*TweetId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTweet not implemented")
}
func (UnimplementedTweetServer) DeleteTweet(context.Context, *TweetId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTweet not implemented")
}
func (UnimplementedTweetServer) LikeTweet(context.Context, *TweetUserId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTweet not implemented")
}
func (UnimplementedTweetServer) UnlikeTweet(context.Context, *TweetUserId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeTweet not implemented")
}
func (UnimplementedTweetServer) AddComment(context.Context, *CommentTweetId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedTweetServer) DeleteComment(context.Context, *CommentId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedTweetServer) mustEmbedUnimplementedTweetServer() {}

// UnsafeTweetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TweetServer will
// result in compilation errors.
type UnsafeTweetServer interface {
	mustEmbedUnimplementedTweetServer()
}

func RegisterTweetServer(s grpc.ServiceRegistrar, srv TweetServer) {
	s.RegisterService(&Tweet_ServiceDesc, srv)
}

func _Tweet_CreateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTweetDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).CreateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/CreateTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).CreateTweet(ctx, req.(*CreateTweetDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_GetTweetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).GetTweetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/GetTweetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).GetTweetById(ctx, req.(*TweetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_GetUserTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).GetUserTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/GetUserTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).GetUserTweets(ctx, req.(*UserIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_GetTweetsByTagId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).GetTweetsByTagId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/GetTweetsByTagId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).GetTweetsByTagId(ctx, req.(*TagId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_UpdateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTweetDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).UpdateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/UpdateTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).UpdateTweet(ctx, req.(*UpdateTweetDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_DeleteTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).DeleteTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/DeleteTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).DeleteTweet(ctx, req.(*TweetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_LikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).LikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/LikeTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).LikeTweet(ctx, req.(*TweetUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_UnlikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).UnlikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/UnlikeTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).UnlikeTweet(ctx, req.(*TweetUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentTweetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).AddComment(ctx, req.(*CommentTweetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweet_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.Tweet/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServer).DeleteComment(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

// Tweet_ServiceDesc is the grpc.ServiceDesc for Tweet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tweet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tweet.Tweet",
	HandlerType: (*TweetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTweet",
			Handler:    _Tweet_CreateTweet_Handler,
		},
		{
			MethodName: "GetTweetById",
			Handler:    _Tweet_GetTweetById_Handler,
		},
		{
			MethodName: "GetUserTweets",
			Handler:    _Tweet_GetUserTweets_Handler,
		},
		{
			MethodName: "GetTweetsByTagId",
			Handler:    _Tweet_GetTweetsByTagId_Handler,
		},
		{
			MethodName: "UpdateTweet",
			Handler:    _Tweet_UpdateTweet_Handler,
		},
		{
			MethodName: "DeleteTweet",
			Handler:    _Tweet_DeleteTweet_Handler,
		},
		{
			MethodName: "LikeTweet",
			Handler:    _Tweet_LikeTweet_Handler,
		},
		{
			MethodName: "UnlikeTweet",
			Handler:    _Tweet_UnlikeTweet_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _Tweet_AddComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Tweet_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tweet.proto",
}
