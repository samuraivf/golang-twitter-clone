// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: redis.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedisClient is the client API for Redis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisClient interface {
	SetRefreshToken(ctx context.Context, in *SetRefreshTokenParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRefreshToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*RefreshToken, error)
	DeleteRefreshToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type redisClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisClient(cc grpc.ClientConnInterface) RedisClient {
	return &redisClient{cc}
}

func (c *redisClient) SetRefreshToken(ctx context.Context, in *SetRefreshTokenParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/redis.Redis/SetRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClient) GetRefreshToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*RefreshToken, error) {
	out := new(RefreshToken)
	err := c.cc.Invoke(ctx, "/redis.Redis/GetRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisClient) DeleteRefreshToken(ctx context.Context, in *Key, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/redis.Redis/DeleteRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisServer is the server API for Redis service.
// All implementations must embed UnimplementedRedisServer
// for forward compatibility
type RedisServer interface {
	SetRefreshToken(context.Context, *SetRefreshTokenParams) (*emptypb.Empty, error)
	GetRefreshToken(context.Context, *Key) (*RefreshToken, error)
	DeleteRefreshToken(context.Context, *Key) (*emptypb.Empty, error)
	mustEmbedUnimplementedRedisServer()
}

// UnimplementedRedisServer must be embedded to have forward compatible implementations.
type UnimplementedRedisServer struct {
}

func (UnimplementedRedisServer) SetRefreshToken(context.Context, *SetRefreshTokenParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRefreshToken not implemented")
}
func (UnimplementedRedisServer) GetRefreshToken(context.Context, *Key) (*RefreshToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefreshToken not implemented")
}
func (UnimplementedRedisServer) DeleteRefreshToken(context.Context, *Key) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRefreshToken not implemented")
}
func (UnimplementedRedisServer) mustEmbedUnimplementedRedisServer() {}

// UnsafeRedisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisServer will
// result in compilation errors.
type UnsafeRedisServer interface {
	mustEmbedUnimplementedRedisServer()
}

func RegisterRedisServer(s grpc.ServiceRegistrar, srv RedisServer) {
	s.RegisterService(&Redis_ServiceDesc, srv)
}

func _Redis_SetRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRefreshTokenParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServer).SetRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis.Redis/SetRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServer).SetRefreshToken(ctx, req.(*SetRefreshTokenParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redis_GetRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServer).GetRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis.Redis/GetRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServer).GetRefreshToken(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redis_DeleteRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServer).DeleteRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis.Redis/DeleteRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServer).DeleteRefreshToken(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// Redis_ServiceDesc is the grpc.ServiceDesc for Redis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Redis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redis.Redis",
	HandlerType: (*RedisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRefreshToken",
			Handler:    _Redis_SetRefreshToken_Handler,
		},
		{
			MethodName: "GetRefreshToken",
			Handler:    _Redis_GetRefreshToken_Handler,
		},
		{
			MethodName: "DeleteRefreshToken",
			Handler:    _Redis_DeleteRefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis.proto",
}
