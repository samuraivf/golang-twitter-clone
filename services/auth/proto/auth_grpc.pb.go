// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: auth.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	GenerateAccessToken(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*AccessToken, error)
	GenerateRefreshToken(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*RefreshTokenData, error)
	ParseAccessToken(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*TokenData, error)
	ParseRefreshToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*TokenData, error)
	GetRefreshTokenTTL(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RefreshTokenTTL, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) GenerateAccessToken(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, "/auth.Authorization/GenerateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GenerateRefreshToken(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*RefreshTokenData, error) {
	out := new(RefreshTokenData)
	err := c.cc.Invoke(ctx, "/auth.Authorization/GenerateRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ParseAccessToken(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*TokenData, error) {
	out := new(TokenData)
	err := c.cc.Invoke(ctx, "/auth.Authorization/ParseAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ParseRefreshToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*TokenData, error) {
	out := new(TokenData)
	err := c.cc.Invoke(ctx, "/auth.Authorization/ParseRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetRefreshTokenTTL(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RefreshTokenTTL, error) {
	out := new(RefreshTokenTTL)
	err := c.cc.Invoke(ctx, "/auth.Authorization/GetRefreshTokenTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	GenerateAccessToken(context.Context, *UserData) (*AccessToken, error)
	GenerateRefreshToken(context.Context, *UserData) (*RefreshTokenData, error)
	ParseAccessToken(context.Context, *AccessToken) (*TokenData, error)
	ParseRefreshToken(context.Context, *RefreshToken) (*TokenData, error)
	GetRefreshTokenTTL(context.Context, *emptypb.Empty) (*RefreshTokenTTL, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) GenerateAccessToken(context.Context, *UserData) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessToken not implemented")
}
func (UnimplementedAuthorizationServer) GenerateRefreshToken(context.Context, *UserData) (*RefreshTokenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRefreshToken not implemented")
}
func (UnimplementedAuthorizationServer) ParseAccessToken(context.Context, *AccessToken) (*TokenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseAccessToken not implemented")
}
func (UnimplementedAuthorizationServer) ParseRefreshToken(context.Context, *RefreshToken) (*TokenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseRefreshToken not implemented")
}
func (UnimplementedAuthorizationServer) GetRefreshTokenTTL(context.Context, *emptypb.Empty) (*RefreshTokenTTL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefreshTokenTTL not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_GenerateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GenerateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/GenerateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GenerateAccessToken(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GenerateRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GenerateRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/GenerateRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GenerateRefreshToken(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ParseAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ParseAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/ParseAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ParseAccessToken(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ParseRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ParseRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/ParseRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ParseRefreshToken(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetRefreshTokenTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetRefreshTokenTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Authorization/GetRefreshTokenTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetRefreshTokenTTL(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAccessToken",
			Handler:    _Authorization_GenerateAccessToken_Handler,
		},
		{
			MethodName: "GenerateRefreshToken",
			Handler:    _Authorization_GenerateRefreshToken_Handler,
		},
		{
			MethodName: "ParseAccessToken",
			Handler:    _Authorization_ParseAccessToken_Handler,
		},
		{
			MethodName: "ParseRefreshToken",
			Handler:    _Authorization_ParseRefreshToken_Handler,
		},
		{
			MethodName: "GetRefreshTokenTTL",
			Handler:    _Authorization_GetRefreshTokenTTL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
